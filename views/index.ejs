<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <title>Stacja pogodowa</title>
    <link rel="shortcut icon" href="./path6.png" type="image/x-icon">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/nano.min.css"/>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.0/jquery.min.js" type="text/javascript"></script>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        *{
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    font-weight: 1000;
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    }
    .picker{
        margin-top: 50px;
        margin-bottom: 30px;
        scale: 3;
        padding: 1px;
        border: 1px dashed #555;
        border-radius: 3px;
    }
    .picker:hover{
        border-color: #111;
    }
    #pickr-container {
            margin: 20px 0;
            display: flex;
            scale: 100%;
            justify-content: center;
        }

   body{
        background-image: url("./appiconfg.svg");
        background-repeat: no-repeat;
        background-size: 500px;
        background-position-x: center;
      }
.div1{
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    max-width: 800px;
    margin: auto;
    display: flex;
    justify-content: center;
}

@media (max-width:700px) {
    .div1{
        flex-direction: column;
    }
    body{
        background-size:95vw;
        background-position-y: center;
    }
}

.div1a{
    padding: 15px;
    margin: 10px;
    border-radius: 10px;
    height: 150px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    background-color: rgba(52, 189, 235,0.8);
    backdrop-filter: blur(8px);
}

.div1b{
    padding: 15px;
    margin: 10px;
    border-radius: 10px;
    height: 150px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    background-color: rgba(52, 189, 235,0.8);
    backdrop-filter: blur(8px);
}

.div1d{
    padding: 15px;
    margin: 10px;
    border-radius: 10px;
    height: 250px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    background-color: rgba(52, 189, 235,0.8);
    backdrop-filter: blur(8px);
}


.div1c{
    padding: 15px;
    margin: 10px;
    border-radius: 10px;
    height: 200px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: rgba(52, 189, 235,0.8);
    backdrop-filter: blur(8px);
}
#aktywnosc1{
    width:100%;
    text-align:center;
    display: none;
    flex-direction: row;
    justify-content: space-between;
    padding:5px;
    background-color:green;
}
#aktywnosc2{
    width:100%;
    text-align:center;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    padding:5px;
    background-color:red;
}

a{
    color: #000000;
}
.div1a>p{
    padding: 5px;
    font-size: 20px;
    text-align: end;
}
button{
          background-color: transparent;
          border: none;
          width: 100px;
          height: 130px;
      }
.div1b>p, .div1d>p{
    font-size: 30px;
    text-align: end;
}
  
</style>
</head>
<body>
    <div id="aktywnosc1">
        <a href="/">
            <svg xmlns="http://www.w3.org/2000/svg" width="23" height="23" fill="currentColor" class="bi bi-house-fill" viewBox="0 0 16 16">
                <path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293z"/>
                <path d="m8 3.293 6 6V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V9.293z"/>
              </svg>
        </a>
            <p>Urządzenie jest aktywne</p>
            <a href="/update">
            <svg xmlns="http://www.w3.org/2000/svg" width="23" height="23" fill="currentColor" class="bi bi-cloud-upload-fill" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M8 0a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 4.095 0 5.555 0 7.318 0 9.366 1.708 11 3.781 11H7.5V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11h4.188C14.502 11 16 9.57 16 7.773c0-1.636-1.242-2.969-2.834-3.194C12.923 1.999 10.69 0 8 0m-.5 14.5V11h1v3.5a.5.5 0 0 1-1 0"/>
              </svg>
            </a>
    </div>
    <div id="aktywnosc2">
        <a href="/">
        <svg xmlns="http://www.w3.org/2000/svg" width="23" height="23" fill="currentColor" class="bi bi-house-fill" viewBox="0 0 16 16">
            <path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293z"/>
            <path d="m8 3.293 6 6V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V9.293z"/>
          </svg>
    </a>
    <p>Urządzenie niejest aktywne</p>
    <a href="/update">
        <svg xmlns="http://www.w3.org/2000/svg" width="23" height="23" fill="currentColor" class="bi bi-cloud-upload-fill" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M8 0a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 4.095 0 5.555 0 7.318 0 9.366 1.708 11 3.781 11H7.5V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11h4.188C14.502 11 16 9.57 16 7.773c0-1.636-1.242-2.969-2.834-3.194C12.923 1.999 10.69 0 8 0m-.5 14.5V11h1v3.5a.5.5 0 0 1-1 0"/>
          </svg>
        </a>
    </div>
    <script>
        function checkStatus() {
            fetch('/status')
                .then(response => response.json())
                .then(data => {
                    const activeStatusDiv1 = document.getElementById('aktywnosc1');
                    const activeStatusDiv2 = document.getElementById('aktywnosc2');
            
                    if (data.status === 'connected') {
                        activeStatusDiv1.style.display = 'flex'; // Pokaż div z aktywnym statusem
                        activeStatusDiv2.style.display = 'none'; // Pokaż div z aktywnym statusem
                    } else {
                        activeStatusDiv1.style.display = 'none'; // Ukryj div, gdy nie jest połączone
                        activeStatusDiv2.style.display = 'flex'; // Ukryj div, gdy nie jest połączone
                    }
            })
        }
    </script>
		<div class="div1">
            <div class="div1a">
                <div><h2>Data i czas</h2></div>
                <p id="date">-- . -- . ----<script>process()</script></p>
                <p id ="time">-- : -- : --<script></script></p>
            </div>
            <div class="div1b">
                <div><h2>Temperatura i wilgotność</h2></div>
                <p id="temp1">--.-°C</p>
                <p id="hum1">-- %</p>
            </div>
            <div class="div1d">
                <div><h2>Temperatura i wilgotność</h2></div>
                <p id="temp2">--.-°C</p>
                <p id="hum2">-- %</p>
                <p id="press2">----.- hPa</p>
                <p id="alti2">---- m</p>
            </div>
            <div class="div1c">
                <h2>Wybierz kolor</h2><br>
                <div class="picker">
                    <div id="pickr-container"></div>
                </div>
            </div>
        </div>
</body>
<script src="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/pickr.min.js"></script>
<script>
    function process(){
      var dt = new Date();
      document.getElementById("time").innerHTML = dt.toLocaleTimeString();
      document.getElementById("date").innerHTML = (dt.getDate()<10?"0"+dt.getDate():dt.getDate())+"."+((dt.getMonth()+1)<10?"0"+(dt.getMonth()+1):dt.getMonth()+1)+"."+dt.getFullYear();
    }
        
    const pickr = Pickr.create({
        el: '#pickr-container',
        theme: 'nano', // 'classic', 'monolith', 'nano'

        components: {
            preview: true,
            hue: true,

            interaction: {
                hex: true,
                input: true,
                save: true,
            }
        }
    });

    function loadColor() {
        fetch('/color')
            .then(response => response.json())
            .then(data => {
                const rgbaColor = `rgba(${data.red}, ${data.green}, ${data.blue}, 1)`;
                pickr.setColor(rgbaColor); // Ustaw kolor w pickr
            })
            .catch(error => console.error('Błąd przy wczytywaniu koloru:', error));
    }

    pickr.on('save', (color, instance) => {
        const rgbaColor = color.toRGBA();
        const data = {
            red: Math.round(rgbaColor[0]),
            green: Math.round(rgbaColor[1]),
            blue: Math.round(rgbaColor[2])
        };

        fetch('/color', {
            method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })
            .then(response => response.ok ? console.log('Kolor wysłany pomyślnie!') : console.error('Błąd przy wysyłaniu koloru!'))
            .catch(error => console.error('Błąd:', error));

        instance.hide();
    });

        

        function fetchData() {
            fetch('/data.json')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('temp1').innerText = `${data.temperature}°C`;
                    document.getElementById('hum1').innerText = `${data.humidity} %`;

                    document.getElementById('temp2').innerText = `${data.temperature2}°C`;
                    document.getElementById('hum2').innerText = `${data.humidity2} %`;
                    document.getElementById('press2').innerText = `${data.pressure} hPa`;
                    document.getElementById('alti2').innerText = `${data.altidute} m`;
            });
        }

        setInterval(checkStatus, 5000);
        checkStatus();
        setInterval(process, 1000);
        setInterval(fetchData, 1000);
        fetchData();
        loadColor(); 
</script>
</html>